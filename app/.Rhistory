authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/28fa065634ed4ab69e263078421ca4ea/services/f6e147e0a4054871a4377b31afdebc93/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
verbose = TRUE
)
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
print(fromJSON(result))
library("RCurl")
library("rjson")
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"),
proxy = "http://proxy.ops.tiaa-cref.org",
proxyport = 8080,
proxyusername = username,
proxypassword = password
))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
d = debugGatherer()
req = list(
Inputs = list(),
GlobalParameters = fromJSON('{}')
)
body = enc2utf8(toJSON(req))
api_key = "z75bB4WiW2ScsQF8GePnNPI3pyPXB7Ez7YvgTxtyNHlfVmns0sQIHWdR2PYr1fMGHq4emE+lRa+IX6fFqH5QKQ==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/28fa065634ed4ab69e263078421ca4ea/services/f6e147e0a4054871a4377b31afdebc93/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
debugfunction = d$update,
verbose = TRUE
)
names(d$value())
d$value()[["headerIn"]]
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
print(fromJSON(result))
d$value()[["dataIn"]]
d$value()[["dataOut"]]
library("RCurl")
library("rjson")
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"),
proxy = "http://proxy.ops.tiaa-cref.org",
proxyport = 8080,
proxyusername = username,
proxypassword = password
))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
d = debugGatherer()
req = list(
#Inputs = list(),
#GlobalParameters = fromJSON('{}')
)
body = enc2utf8(toJSON(req))
api_key = "z75bB4WiW2ScsQF8GePnNPI3pyPXB7Ez7YvgTxtyNHlfVmns0sQIHWdR2PYr1fMGHq4emE+lRa+IX6fFqH5QKQ==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/28fa065634ed4ab69e263078421ca4ea/services/f6e147e0a4054871a4377b31afdebc93/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
debugfunction = d$update,
verbose = TRUE
)
names(d$value())
d$value()[["headerIn"]]
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
print(fromJSON(result))
d$value()[["sslDataOut"]]
d$value()[["dataOut"]]
d$value()[["dataIn"]]
d$value()[["dataOut"]]
library("RCurl")
library("rjson")
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"),
proxy = "http://proxy.ops.tiaa-cref.org",
proxyport = 8080,
proxyusername = username,
proxypassword = password
))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
d = debugGatherer()
req = list(
#Inputs = list(),
GlobalParameters = fromJSON('{}')
)
body = enc2utf8(toJSON(req))
api_key = "z75bB4WiW2ScsQF8GePnNPI3pyPXB7Ez7YvgTxtyNHlfVmns0sQIHWdR2PYr1fMGHq4emE+lRa+IX6fFqH5QKQ==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/28fa065634ed4ab69e263078421ca4ea/services/f6e147e0a4054871a4377b31afdebc93/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
debugfunction = d$update,
verbose = TRUE
)
names(d$value())
d$value()[["headerIn"]]
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
print(fromJSON(result))
d$value()[["dataOut"]]
req
toJSON(req)
library("RCurl")
library("rjson")
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"),
proxy = "http://proxy.ops.tiaa-cref.org",
proxyport = 8080,
proxyusername = username,
proxypassword = password
))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
d = debugGatherer()
req = list(
#Inputs = list(),
GlobalParameters = fromJSON('{}')
)
reqStr = "{\"GlobalParameters\":{}}"
#body = enc2utf8(toJSON(req))
body = enc2utf8(reqStr)
api_key = "z75bB4WiW2ScsQF8GePnNPI3pyPXB7Ez7YvgTxtyNHlfVmns0sQIHWdR2PYr1fMGHq4emE+lRa+IX6fFqH5QKQ==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/28fa065634ed4ab69e263078421ca4ea/services/f6e147e0a4054871a4377b31afdebc93/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
debugfunction = d$update,
verbose = TRUE
)
names(d$value())
d$value()[["headerIn"]]
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
print(fromJSON(result))
library("RCurl")
library("rjson")
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"),
proxy = "http://proxy.ops.tiaa-cref.org",
proxyport = 8080,
proxyusername = username,
proxypassword = password
))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
d = debugGatherer()
req = list(
#Inputs = list(),
GlobalParameters = fromJSON('{}')
)
reqStr = "{\"GlobalParameters\":{}}"
#body = enc2utf8(toJSON(req))
body = enc2utf8(reqStr)
api_key = "z75bB4WiW2ScsQF8GePnNPI3pyPXB7Ez7YvgTxtyNHlfVmns0sQIHWdR2PYr1fMGHq4emE+lRa+IX6fFqH5QKQ==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/28fa065634ed4ab69e263078421ca4ea/services/f6e147e0a4054871a4377b31afdebc93/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
debugfunction = d$update,
verbose = TRUE
)
names(d$value())
d$value()[["headerIn"]]
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
print(fromJSON(result))
library("RCurl")
library("rjson")
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(
cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"),
proxy = "http://proxy.ops.tiaa-cref.org",
proxyport = 8080,
proxyusername = username,
proxypassword = password
))
h = basicTextGatherer()
hdr = basicHeaderGatherer()
d = debugGatherer()
req = list(
#Inputs = list(),
GlobalParameters = fromJSON('{}')
)
reqStr = "{\"GlobalParameters\":{}}"
#body = enc2utf8(toJSON(req))
body = enc2utf8(reqStr)
api_key = "z75bB4WiW2ScsQF8GePnNPI3pyPXB7Ez7YvgTxtyNHlfVmns0sQIHWdR2PYr1fMGHq4emE+lRa+IX6fFqH5QKQ==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/28fa065634ed4ab69e263078421ca4ea/services/f6e147e0a4054871a4377b31afdebc93/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
headerfunction = hdr$update,
debugfunction = d$update,
verbose = TRUE
)
names(d$value())
d$value()[["headerIn"]]
headers = hdr$value()
httpStatus = headers["status"]
if (httpStatus >= 400)
{
print(paste("The request failed with status code:", httpStatus, sep=" "))
# Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
print(headers)
}
print("Result:")
result = h$value()
print(fromJSON(result))
library(dplyr)
library(tidyr)
library(readr)
install.packages("readr")
library(readr)
install.packages("babynames")
library(babynames)
babynames
babynames %>% filter(name == "Hadley")
babynames %>% filter(year == 1900)
babynames %>%
group_by(name) %>%
summarise(n = sum(n))
babynames %>%
filter(name == "Hadley")
group_by(sex) %>%
summarise(n = sum(n))
babynames %>%
filter(name == "Hadley") <%>
group_by(sex) %>%
summarise(n = sum(n))
babynames %>%
filter(name == "Hadley") %>%
group_by(sex) %>%
summarise(n = sum(n))
install.packages("ggvis")
mpg
data(mpg)
library(ggplot2)
mpg
babynames %>%
filter(name == "Hadley") %>%
group_by(sex) %>%
summarise(n = sum(n))
slidify(index.Rmd)
shinyapps::setAccountInfo(name='coursera-2015', token='35F62BEBBD3FB7150B8FF60E3CBDF383', secret='pJwvlvRL8uJPMSptLmGkJ9JvjmB24SDk4LXDIF+l')
shinyapps::setAccountInfo(name='coursera-2015', token='35F62BEBBD3FB7150B8FF60E3CBDF383', secret='pJwvlvRL8uJPMSptLmGkJ9JvjmB24SDk4LXDIF+l')
shinyapps::setAccountInfo(name='coursera-2015', token='35F62BEBBD3FB7150B8FF60E3CBDF383', secret='pJwvlvRL8uJPMSptLmGkJ9JvjmB24SDk4LXDIF+l')
installed.packages()
shinyapps::setAccountInfo(name='coursera-2015', token='35F62BEBBD3FB7150B8FF60E3CBDF383', secret='pJwvlvRL8uJPMSptLmGkJ9JvjmB24SDk4LXDIF+l')
shinyapps::setAccountInfo(name='coursera-2015', token='35F62BEBBD3FB7150B8FF60E3CBDF383', secret='pJwvlvRL8uJPMSptLmGkJ9JvjmB24SDk4LXDIF+l')
shinyapps::setAccountInfo(name='coursera-2015', token='35F62BEBBD3FB7150B8FF60E3CBDF383', secret='pJwvlvRL8uJPMSptLmGkJ9JvjmB24SDk4LXDIF+l')
options(RCurlOptions = list(capath = system.file("CurlSSL", "cacert.pem", package = "RCurl"), ssl.verifypeer = FALSE, ssl.verifyhost = FALSE, verbose = TRUE, header = TRUE, writefunc = tt[[1]]))
tt = basicTextGatherer()
library(RCurl)
tt = basicTextGatherer()
options(RCurlOptions = list(capath = system.file("CurlSSL", "cacert.pem", package = "RCurl"), ssl.verifypeer = FALSE, ssl.verifyhost = FALSE, verbose = TRUE, header = TRUE, writefunc = tt[[1]]))
shinyapps::setAccountInfo(name='coursera-2015', token='35F62BEBBD3FB7150B8FF60E3CBDF383', secret='pJwvlvRL8uJPMSptLmGkJ9JvjmB24SDk4LXDIF+l')
shinyapps::setAccountInfo(name='coursera-2015', token='35F62BEBBD3FB7150B8FF60E3CBDF383', secret='pJwvlvRL8uJPMSptLmGkJ9JvjmB24SDk4LXDIF+l')
shinyapps::setAccountInfo(name='coursera-2015', token='35F62BEBBD3FB7150B8FF60E3CBDF383', secret='pJwvlvRL8uJPMSptLmGkJ9JvjmB24SDk4LXDIF+l')
library(shinyapps)
shinyapps::setAccountInfo(name='coursera-2015', token='35F62BEBBD3FB7150B8FF60E3CBDF383', secret='pJwvlvRL8uJPMSptLmGkJ9JvjmB24SDk4LXDIF+l')
appDir = "~/Coursera/JHU-DaSH/git/JHU-DaSH/"
setwd(appDir)
deployApp()
dir()
appDir = "~/Coursera/JHU-DaSH/git/JHU-DaSH/shinyApp/"
deployApp()
shinyApp(ui = "shinyUI", server = "shinyServer")
setwd(appDir)
deployApp()
deployApp(appName = "JHU-DaSH")
deployApp(appName = "JHU-DaSH")
setwd("C:\Users\bassro\SkyDrive\Documents\Coursera\Capstone\Slidify")
setwd("C:/Users/bassro/SkyDrive/Documents/Coursera/Capstone/Slidify")
appDir = "~/GitHub/JHU-DaSH/app"
setwd(appDir)
runApp()
library(shinyapps)
runApp()
library(shiny)
runApp()
install.packages("xgboost")
runApp()
dfCollege <- read.csv("./fullSet.csv")
dfCollege$LOCALE <- as.numeric(dfCollege$LOCALE)
dfCollege$region <- as.numeric(dfCollege$region)
dfCollege$UNITID <- NULL
dfCollege$INSTNM <- NULL
dfCollege$CITY <- NULL
dfCollege$STABBR <- NULL
dfCollege$GRAD_DEBT_MDN_SUPP <- NULL
dfCollege$LOCALE <- NULL
######################################
#functions
######################################
calculateROI <- function(inpMajor, inpSAT, inpPopulation, inpRegion, inpPublic) {
#print('Debug 1')
#e.g. train is the data
y = dfCollege$roi
train2 = subset(dfCollege, select=-c(roi))
#print('Debug 2')
dtrn<-sparse.model.matrix(~.-1, data = train2)
mod = xgboost(data=dtrn, max.depth=6, eta=0.04, nthread=4, nround=100, objective = "reg:linear",
eval.metric="rmse", verbose=0, subsample=0.7, label=y)
#print('Debug 3')
predictDF <- data.frame(SAT_AVG=inpSAT,
UGDS=inpPopulation,
region=as.integer(inpRegion),
isPublic=as.integer(inpPublic),
nPCIP01=0,
nPCIP03=0,
nPCIP11=0,
nPCIP14=0,
nPCIP22=0,
nPCIP23=0,
nPCIP26=0,
nPCIP27=0,
nPCIP52=0,
nPCIP54=0
)
#print('Debug 4')
if (inpMajor == "nPCIP01"){
predictDF$nPCIP01 <- 1
} else if (inpMajor == "nPCIP03") {
predictDF$nPCIP03 <- 1
} else if (inpMajor == "nPCIP11") {
predictDF$nPCIP11 <- 1
} else if (inpMajor == "nPCIP14") {
predictDF$nPCIP14 <- 1
} else if (inpMajor == "nPCIP22") {
predictDF$nPCIP22 <- 1
} else if (inpMajor == "nPCIP23") {
predictDF$nPCIP23 <- 1
} else if (inpMajor == "nPCIP26") {
predictDF$nPCIP26 <- 1
} else if (inpMajor == "nPCIP27") {
predictDF$nPCIP27 <- 1
} else if (inpMajor == "nPCIP52") {
predictDF$nPCIP52 <- 1
} else if (inpMajor == "nPCIP54") {
predictDF$nPCIP54 <- 1
}
#print('Debug 6')
#print(str(predictDF))
dtest<-sparse.model.matrix(~.-1, data = predictDF)
#print('Debug 7')
returnROI = predict(mod,dtest)
#print(names(dfCollege))
#lmROI <- lm(roi ~ ., data=dfCollege)
#varString <- paste0("region+SAT_AVG+LOCALE+UGDS+", inpMajor)
#varString <- paste0("region+SAT_AVG+LOCALE+UGDS+", "nPCIP03")
#lmString <- paste0("lm(roi ~ ",varString, ",data=dfCollege)")
#print(names(dfCollege))
#print(lmString)
#lmROI <- eval(parse(text=lmString))
#predictString <- paste0("predict(lmROI, data.frame(region=as.numeric(inpRegion), SAT_AVG=inpSAT, LOCALE=inpLocale, UGDS=inpPopulation))")
#returnROI <- eval(parse(text=predictString))
### WORKING CODE ###
#lmROI <- lm(roi ~ region+SAT_AVG+LOCALE+UGDS, data=dfCollege)
#returnROI <- predict(lmROI, data.frame(nPCIP11=1,region=as.numeric(inpRegion), SAT_AVG=inpSAT, LOCALE=inpLocale, UGDS=inpPopulation, isPublic=as.numeric(inpPublic)))
### END WORKING CODE ###
return(returnROI)
}
input$selMajor = "nPCIP14"
input$selSAT = 400
input$slPopulation = 2000
input$selRegion = 1
input$selPublic = 1
calculateROI(
inpMajor = input$selMajor,
inpSAT = as.numeric(input$selSAT),
#inpLocale  = as.numeric(input$selLocale),
inpPopulation = input$slPopulation,
inpRegion = input$selRegion,
inpPublic = input$selPublic
)
library(shiny)
library(datasets)
library(ggplot2)
library(caret)
library(xgboost)
library(Matrix)
calculateROI(
inpMajor = input$selMajor,
inpSAT = as.numeric(input$selSAT),
#inpLocale  = as.numeric(input$selLocale),
inpPopulation = input$slPopulation,
inpRegion = input$selRegion,
inpPublic = input$selPublic
)
calculateROI(
inpMajor = input$selMajor,
inpSAT = as.numeric(input$selSAT),
#inpLocale  = as.numeric(input$selLocale),
inpPopulation = input$slPopulation,
inpRegion = input$selRegion,
inpPublic = input$selPublic
)
source("functions.R")
calculateROI(
inpMajor = input$selMajor,
inpSAT = as.numeric(input$selSAT),
#inpLocale  = as.numeric(input$selLocale),
inpPopulation = input$slPopulation,
inpRegion = input$selRegion,
inpPublic = input$selPublic
)
shiny::runApp()
calculateROI(
inpMajor = input$selMajor,
inpSAT = as.numeric(input$selSAT),
#inpLocale  = as.numeric(input$selLocale),
inpPopulation = input$slPopulation,
inpRegion = input$selRegion,
inpPublic = input$selPublic
)
class(dfCollege)
train2 = subset(dfCollege, select=-c(dfCollege$roi))
names(dfCollege)
runApp()
deployApp(appName = "JHU-DaSH")
runApp()
shiny::runApp()
runApp(launch.browser = FALSE)
runApp(launch.browser = FALSE)
runApp(launch.browser = FALSE)
deployApp(appName = "JHU-DaSH")
appDir = "~/GitHub/JHU-DaSH/slides/"
setwd(appDir)
appDir = "~/GitHub/JHU-DaSH/app"
setwd(appDir)
runApp(launch.browser = FALSE)
library(shinyapps)
deployApp(appName = "JHU-DaSH")
